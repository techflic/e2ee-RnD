/**
 * We will be generating a share secret key between two clients ( alice and bob ) using Diffie Hellman.
 */



/**
 * built by NodeJs
 */
const crypto = require("crypto");

/**
 * STEP 1 :: initialize alice and bob with same 'modp' groups
 * using 'modp15' group which gives 'shared secret' of 3072 bits. It also uses a 'prime number' which is 3072 bits long.
 * Note - you can check RFC3526 to more available modp groups.
 */
const alice = crypto.getDiffieHellman("modp15");

const bob = crypto.getDiffieHellman("modp15");


/**
 *  Note - For diffie-hellman key exchange to work we need few common attributes between alice and bob i.e, same 'prime number' and same 'generator' using 'modp15' group.
 */


/**
 * STEP 2 :: initialize 'prime number'
 */
const alicePrimeNumber = alice.getPrime().toString('hex');
console.log("alicePrimeNumber :: ", alicePrimeNumber); // matches to the value specified in the RFC3526

const bobPrimeNumber = bob.getPrime().toString('hex');
console.log("bobPrimeNumber :: ", bobPrimeNumber); // matches to the value specified in the RFC3526


/**
 * STEP 3 :: generate 'public' and 'private' keys
 */
alice.generateKeys();
const alicePublicKey = alice.getPublicKey();

bob.generateKeys();
const bobPublicKey = bob.getPublicKey();


/**
 * STEP 3 :: generate the 'shared secret' key
 */
const aliceSecret = alice.computeSecret(
    bobPublicKey, // 1st param is the other public key.
    null, // 2nd param is type of input we are passing. Note - passing null bc 1st param is a buffer itself. If 1st param was base64 then we had to pass 'base64'
    "hex" // 3rd param is the output type expected.
);

const bobSecret = bob.computeSecret(
    alicePublicKey,
    null,
    "hex"
);


/**
 * Finally compare 'share secret' key generated by both clients. Now this is to be used to encrypt and decrypt messages in any of the cipher algorithms like AES, etc.
 */
console.log("aliceSecret ==== bobSecret :: ", aliceSecret === bobSecret);
